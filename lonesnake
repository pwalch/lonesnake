#!/usr/bin/env bash

# Copyright (C) 2021 Pierre Walch
# This code is licensed under the GNU GPL, see the LICENSE file.
# https://github.com/pwalch/lonesnake/

set -euo pipefail

readonly PROG_VERSION="0.8.0"

PROG_NAME="$(basename "$0")"
readonly PROG_NAME

# New directory that will be created in the current working directory
# to host the Python interpreter and the venv.
readonly STANDALONE_DIRNAME=".lonesnake"

# Directory where the Python interpreter source code and build files will be stored.
readonly CACHE_DIR="$HOME/.cache/lonesnake"

# Latest patch version number for each supported Python minor version
readonly LATEST_PATCH_CP37="13"
readonly LATEST_PATCH_CP38="13"
readonly LATEST_PATCH_CP39="11"
readonly LATEST_PATCH_CP310="3"

# Default CPython version if the user does not request a specific version
readonly DEFAULT_CP_MINOR="3.10"
readonly DEFAULT_CP_VERSION="${DEFAULT_CP_MINOR}.${LATEST_PATCH_CP310}"

# Color markers
readonly CLR_BOLD="\033[1m"  # bold
readonly CLR_UDL="\033[4m"  # underline
readonly CLR_RED="\033[31m"  # red
readonly CLR_BGR="\033[2m"  # background
readonly CLR_ITL="\033[3m"  # italic
readonly CLR_END="\033[0m"  # end-marker

function usage() {
    echo -e "${CLR_BOLD}${PROG_NAME}${CLR_END} ${PROG_VERSION}"
    echo
    echo -e "Usage: ${CLR_BOLD}${PROG_NAME}${CLR_END}" \
        "[${CLR_BOLD}--py${CLR_END} ${CLR_UDL}VERSION${CLR_END}]" \
        "[${CLR_BOLD}--force${CLR_END}]" \
        "[${CLR_BOLD}--version${CLR_END}]"
    echo
    echo "Creates a standalone Python environment in a new directory named "
    echo "'$STANDALONE_DIRNAME' inside your working directory. This environment includes"
    echo "a CPython interpreter built from source and a venv created with that"
    echo "interpreter."
    echo "The source and build files are cached in '$CACHE_DIR'."
    echo
    echo -e "${CLR_BOLD}OPTIONS${CLR_END}"
    echo -e "  ${CLR_BOLD}--py${CLR_END} ${CLR_UDL}VERSION${CLR_END}"
    echo "       Pass a version number to install the CPython interpreter"
    echo "       version of your choice. By default, the version $DEFAULT_CP_VERSION"
    echo "       is installed. Only versions from CPython 3.7+ are supported."
    echo "       If you don't pass only a minor version number such as '3.10', the"
    echo "       latest released patch will be used."
    echo "       You can find the list of all Python releases on this page:"
    echo "       https://www.python.org/downloads/"
    echo
    echo -e "  ${CLR_BOLD}--force${CLR_END}"
    echo "      By default, the user is asked to confirm via stdin whether an existing"
    echo "      '$STANDALONE_DIRNAME' directory should be deleted. If '--force' is"
    echo "      passed, no question is asked and we always proceed with deletion. Use"
    echo "      this flag in your non-interactive scripts."
    echo
    echo -e "  ${CLR_BOLD}--version${CLR_END} or ${CLR_BOLD}-v${CLR_END}"
    echo "      Print version number of $PROG_NAME."
    echo
    echo -e "  ${CLR_BOLD}--help${CLR_END} or ${CLR_BOLD}-h${CLR_END}"
    echo "      Print this help message."
    echo
    print_python_deps
    echo
}

function print_python_deps() {
    echo -e "${CLR_BOLD}DEPENDENCIES${CLR_END}"
    echo "  📝 Make sure you have installed all the dependencies that are necessary"
    echo "     to compile the CPython interpreter. Check out the docs for more details"
    echo "     about how to do it for your OS."
}

function error_out() {
    echo -e "${CLR_RED}[ERROR] $*${CLR_END}" >&2
    exit 1
}

function check_prerequisites() {
    if [[ "$OSTYPE" != "linux-gnu"* ]] && [[ "$OSTYPE" != "darwin"* ]]; then
        error_out "Your OS '$OSTYPE' is not supported. Only Linux and macOS" \
            "are supported for now."
    fi

    if [[ ! -x "$(command -v curl)" ]]; then
        error_out "'curl' command not found, please install it."
    fi

    if [[ ! -x "$(command -v make)" ]]; then
        error_out "'make' command not found, please install it."
    fi

    if [[ "$OSTYPE" == "darwin"* ]] && [[ ! -x "$(command -v brew)" ]]; then
        error_out "'brew' command not found even though you are on macOS, please" \
            "install Homebrew."
    fi

}

function main() {
    local user_standalone_version="$1"
    local force_removal="$2"

    check_prerequisites

    # Extract the major + minor + patch number to variables
    local cpython_major=""
    local cpython_minor=""
    local cpython_patch=""
    if [[ $user_standalone_version =~ ^([0-9]+)\.([0-9]+)$ ]]; then
        local cpython_major="${BASH_REMATCH[1]}"
        local cpython_minor="${BASH_REMATCH[2]}"
    elif [[ $user_standalone_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
        local cpython_major="${BASH_REMATCH[1]}"
        local cpython_minor="${BASH_REMATCH[2]}"
        local cpython_patch="${BASH_REMATCH[3]}"
    else
        error_out "The version number you passed '$user_standalone_version' does not" \
            "follow the X.Y.Z or X.Y release formats. Please pass a version number" \
            "like '$DEFAULT_CP_VERSION' or '${DEFAULT_CP_MINOR}'."
    fi

    check_cpython_major_minor_version "$cpython_major" "$cpython_minor"

    # If the user provides just the major and the minor version numbers, we try to
    # guess the patch version number.
    if [[ -z "$cpython_patch" ]]; then
        cpython_patch="$(guess_cpython_patch_number "$cpython_minor")"
    fi

    create_standalone_dir "$cpython_major" "$cpython_minor" "$cpython_patch"
}

function check_cpython_major_minor_version() {
    local major_number="$1"
    local minor_number="$2"

    if [[ "$major_number" != "3" ]] || [[ "$minor_number" -lt "7" ]]; then
        error_out "Python version '$major_number' that you requested is" \
            "not supported. Please use Python 3.7+."
    fi
}

function guess_cpython_patch_number() {
    local minor="$1"

    if [[ "$minor" == 7 ]]; then
        echo "$LATEST_PATCH_CP37"
    elif [[ "$minor" == 8 ]]; then
        echo "$LATEST_PATCH_CP38"
    elif [[ "$minor" == 9 ]]; then
        echo "$LATEST_PATCH_CP39"
    elif [[ "$minor" == 10 ]]; then
        echo "$LATEST_PATCH_CP310"
    else
        error_out "Could not find a patch version number for the minor version" \
            "'$cpython_patch' that you provided."
    fi
}

function create_standalone_dir() {
    local cpython_major="$1"
    local cpython_minor="$2"
    local cpython_patch="$3"

    local standalone_version="${cpython_major}.${cpython_minor}.${cpython_patch}"

    echo -e "We are going to install a standalone Python environment in directory"
    echo -e "${CLR_BOLD}${STANDALONE_DIRNAME}${CLR_END}, which will include the" \
        "CPython $standalone_version interpreter"
    echo -e "as well as a venv based on this interpreter."
    echo

    remove_standalone_dir "$STANDALONE_DIRNAME" "$force_removal"

    local cache_source_dir="${CACHE_DIR}/${standalone_version}"
    ensure_cache_dir "$cache_source_dir" "$standalone_version"

    echo -e "${CLR_BOLD}CPYTHON INTERPRETER COMPILATION & INSTALLATION${CLR_END}"
    local interpreter_rel_dir="${STANDALONE_DIRNAME}/interpreter"
    local interpreter_dir="${PWD}/${STANDALONE_DIRNAME}/interpreter"
    compile_and_install_cpython "$cache_source_dir" "$interpreter_rel_dir" \
        "$interpreter_dir"

    local python_binary_name="python${cpython_major}.${cpython_minor}"
    local standalone_rel_bin="${interpreter_rel_dir}/bin/${python_binary_name}"
    verify_interpreter "$standalone_version" "$standalone_rel_bin"
    echo

    echo -e "${CLR_BOLD}VENV INSTALLATION${CLR_END}"
    local venv_rel_dir="${STANDALONE_DIRNAME}/venv"
    install_venv "$venv_rel_dir" "$standalone_rel_bin"

    echo

    echo -e "${CLR_BOLD}SUMMARY${CLR_END}"
    print_install_success "$STANDALONE_DIRNAME" "$interpreter_rel_dir" \
        "$venv_rel_dir"

    print_activation_instructions "$venv_rel_dir"
}

function remove_standalone_dir() {
    local standalone_dir_path="$1"
    local force_removal="$2"

    # If standalone directory does not exist, we don't need to delete it
    if [[ ! -d "$standalone_dir_path" ]]; then
        return
    fi

    local answer="y"
    # When removal of directory is not forced, we ask the user
    if [[ "$force_removal" -eq 0 ]]; then
        echo "❓ An environment already exists at '$standalone_dir_path'."
        read -rp "   Do you want to remove it? (y/n) " answer
        case "$answer" in
            y|Y|yes|YES)
                # If yes, we are continuing, in other cases we abort.
            ;;
            n|N|no|NO)
                error_out "Cannot continue without removing existing environment." \
                    "Aborting."
            ;;
            *)
                error_out "Please re-try and answer 'y' or 'n'."
            ;;
        esac
    fi

    echo "🗑️  Deleting old '$standalone_dir_path' directory now so we can start with"
    echo "   a clean state."
    if ! rm -rf "$standalone_dir_path"; then
        error_out "Could not remove old environment directory at '$standalone_dir_path'."
    fi
    echo "  ✅ deleted old environment directory"
    echo
}

function check_minor_version() {
    local cpython_minor="$1"

    local python_major_number
    python_major_number=$(echo "$cpython_minor" 2>&1 | \
        grep -Eo "^[0-9]+" | tr -d '\n')
    if [[ "$python_major_number" != "3" ]]; then
        error_out "Python major version '$python_major_number' that you requested is" \
            "not supported. Please use Python 3.7+."
    fi

    local python_minor_number
    python_minor_number=$(echo "$cpython_minor" 2>&1 | \
        grep -Eo "[0-9]+$" | tr -d '\n')
    if [[ "$python_minor_number" -lt "7" ]]; then
        error_out "Python version '$standalone_version' that you requested is too" \
            "old and not supported. Please use Python 3.7+."
    fi
}

function ensure_cache_dir() {
    local cache_source_dir="$1"
    local standalone_version="$2"

    if ! mkdir -p "$CACHE_DIR"; then
        error_out "Could not create cache directory for the interpreters" \
            "at '$CACHE_DIR'."
    fi

    if ! mkdir -p "$cache_source_dir"; then
        error_out "Could not create cache directory for CPython version" \
            "$standalone_version."
    fi
}

function compile_and_install_cpython() {
    local cache_source_dir="$1"
    local interpreter_rel_dir="$2"
    local interpreter_dir="$3"

    echo "➖ Looking for a previous build of CPython $standalone_version interpreter in"
    echo "the cache at '$cache_source_dir'..."
    local ready_file="$cache_source_dir/ready"
    if [[ -f "$ready_file" ]]; then
        skip_compile_interpreter "$standalone_version" "$cache_source_dir"
    else
        # If the 'ready' file does not exist, it means a previous build was aborted
        # before completion, so the directory is not in a usable state and we must
        # remove it.
        rm -rf "${cache_source_dir:?}/*"

        compile_interpreter "$standalone_version" "$ready_file" "$cache_source_dir"
    fi

    install_interpreter "$interpreter_rel_dir" \
        "$interpreter_dir" "$cache_source_dir"
}

function verify_interpreter() {
    local standalone_version="$1"
    local standalone_rel_bin="$2"

    echo "➖ Verifying that the interpreter located at '$standalone_rel_bin' runs and" \
        "returns the expected version..."

    local version_stdout
    if ! version_stdout="$("$standalone_rel_bin" --version)"; then
        error_out "Could not get Python version using interpreter: $standalone_rel_bin"
    fi

    local expected_version_stdout="Python $standalone_version"
    if [[ "$version_stdout" != "Python $standalone_version" ]]; then
        error_out "Version of interpreter at '$standalone_rel_bin'" \
            "('${version_stdout}') does not match expected version" \
            "'$expected_version_stdout'."
    fi

    echo "  ✅ ran 'python --version' using the interpreter we just compiled. It" \
        "returned '$version_stdout' as expected."
}

function compile_interpreter() {
    local standalone_version="$1"
    local ready_file="$2"
    local cache_source_dir="$3"

    # On macOS, OpenSSL is located in a non-standard location when installed
    # with brew. We use 'brew --prefix openssl', and pass the resulting path later
    # to the CPython configure script with '--with-openssl'.
    local with_openssl_str=""
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if ! brew_openssl_prefix="$(brew --prefix openssl)"; then
            error_out "You are on macOS, but we the OpenSSL path cannot be found" \
                "with 'brew --prefix openssl'. Did you install 'openssl' with brew?"
        fi
        with_openssl_str="--with-openssl=${brew_openssl_prefix}"
    fi

    echo "  ℹ️  No previous build of CPython $standalone_version was found in the" \
        "cache, so we are going to download its source code from 'python.org' and" \
        "compile it."

    local python_org_url="https://www.python.org"
    if ! curl -sI --output /dev/null --fail "$python_org_url"; then
        error_out "Could not reach 'python.org', do you have Internet access?"
    fi

    # Check whether requested Python interpreter version exists on 'python.org' 
    local ftp_base_url="${python_org_url}/ftp/python"
    local ftp_version_path="${standalone_version}/Python-${standalone_version}.tgz"
    local python_source_url="${ftp_base_url}/${ftp_version_path}"
    if ! curl -sI --output /dev/null --fail "$python_source_url"; then
        error_out "Python version '$standalone_version' that you are" \
            "trying to install cannot be found on 'python.org' at" \
            "this address: $python_source_url. Did you make a typo?"
    fi

    echo "➖ Downloading Python interpreter source code from" \
        "'$python_source_url'..."
    if ! curl -s "$python_source_url" | \
            tar -xz -C "$cache_source_dir" --strip-components=1; then
        error_out "Could not download Python interpreter source code" \
            "tarball '$python_source_url' to temporary" \
            "directory '$cache_source_dir'."
    fi

    echo "  ✅ downloaded Python interpreter to '$cache_source_dir'."
    # Check whether the Python interpreter source directory exists and enter it
    if [[ ! -d "$cache_source_dir" ]]; then
        error_out "Could not find Python interpreter source" \
            "directory: $cache_source_dir"
    fi

    echo "➖ Running './configure' in Python interpreter source code directory" \
        "'$cache_source_dir'..."
    local start_configure_date="$SECONDS"
    # We pass '--prefix ""' so all paths are relative to 'DESTDIR' at the 'make install'
    # step later. If we don't set it, it is in /usr/local by default.
    local configure_output
    if ! configure_output="$(pushd "$cache_source_dir" && \
            ./configure --prefix="" "$with_openssl_str" 2>&1 &&
            popd)"; then
        echo "[ERROR] Detailed logs for '.configure':"
        echo "$configure_output"
        echo
        print_python_deps
        error_out "Could not run 'configure' for Python interpreter source" \
            "at '$cache_source_dir'."
    fi
    local end_configure_date="$SECONDS"
    local configure_duration=$((end_configure_date - start_configure_date))
    echo "  ✅ ran './configure' in ${configure_duration}s, ready to" \
        "compile interpreter."

    echo "➖ Compiling Python interpreter with 'make -j2'..."
    local start_compile_date="$SECONDS"
    local make_output
    # On python.org, the compilation tutorial suggests to use 'make -j2'.
    # https://devguide.python.org/setup/#install-dependencies
    if ! make_output="$(make -C "$cache_source_dir" -j2 2>&1)"; then
        echo "[ERROR] Detailed logs for 'make -j2':"
        echo "$make_output"
        error_out "Could not compile Python interpreter" \
            "with 'make -j' at '$cache_source_dir'"
    fi
    local end_compile_date="$SECONDS"
    local compile_duration=$((end_compile_date - start_compile_date))
    echo "  ✅ compiled Python interpreter in ${compile_duration}s."

    echo "➖ Checking that the Python interpreter was compiled with OpenSSL..."
    local cache_dir_python_bin="${cache_source_dir}/python"
    if [[ "$OSTYPE" = "darwin"* ]]; then
        # On macOS, the Python executable is created with a '.exe' suffix. This is
        # because the default file system on macOS is case insensitive and the
        # executable would therefore be confused with the 'Python' directory.
        cache_dir_python_bin="${cache_source_dir}/python.exe"
    fi

    if [[ ! -f "$cache_dir_python_bin" ]]; then
        error_out "Could not find Python binary at location '${cache_dir_python_bin}'" \
            "in source directory after compilation."
    fi

    local python_ssl_stdout
    if ! python_ssl_stdout="$( \
            "$cache_dir_python_bin" -c "import ssl; print(ssl.OPENSSL_VERSION)" \
        )"; then
        echo "[ERROR] Detailed logs for import of 'ssl' package in Python:"
        echo "$python_ssl_stdout"
        error_out "Could not import 'ssl' with the Python interpreter that was built" \
            "at ${cache_dir_python_bin}. Please check your OpenSSL installation."
    fi
    echo "  ✅ The Python interpreter's 'OPENSSL_VERSION' is: ${python_ssl_stdout}"

    echo "This file indicates that the CPython interpreter has been fully built in" \
        "this directory. We use this to know whether 'make install' can be run." \
        "without having to re-compile." \
        > "$ready_file"
}

function install_interpreter() {
    local interpreter_rel_dir="$1"
    local interpreter_dir="$2"
    local cache_source_dir="$3"
    
    echo "➖ Installing Python interpreter to '$interpreter_rel_dir'..."
    local start_install_date="$SECONDS"
    local make_install_output
    if ! make_install_output="$(export DESTDIR="$interpreter_dir" && \
            make -C "$cache_source_dir" install 2>&1)"; then
        echo "[ERROR] Detailed logs for 'make install':"
        echo "$make_install_output"
        error_out "Could not run 'make install' in '$cache_source_dir'."
    fi
    local end_install_date="$SECONDS"
    local install_duration=$((end_install_date - start_install_date))
    echo "  ✅ installed Python interpreter in ${install_duration}s."
}

function skip_compile_interpreter() {
    local standalone_version="$1"
    local cache_source_dir="$2"
    echo "  ✅ Found a previous build of CPython $standalone_version in the cache," \
        "so skipping compilation"
    echo "     and moving directly to installation. If you wish to remove the cache,"
    echo "     you can run this command:"
    echo -e "       ${CLR_BGR}rm -rf ${cache_source_dir}${CLR_END}"
}

function install_venv() {
    local venv_rel_dir="$1"
    local standalone_rel_bin="$2"

    echo "➖ Creating a Python venv at '$venv_rel_dir' using the interpreter we built..."
    if ! "$standalone_rel_bin" -m venv "$venv_rel_dir"; then
        error_out "Could not create venv at '$venv_rel_dir'."
    fi
    echo "  ✅ created Python venv"

    local venv_pip="$venv_rel_dir/bin/pip"
    if [[ ! -f "$venv_pip" ]]; then
        error_out "Could not find 'pip' in venv at: $venv_pip"
    fi

    echo "➖ Upgrading Pip and setuptools inside venv using '$venv_pip'..."
    # Upgrading pip and setuptools can be done at venv creation using the
    # '--upgrade-deps' option, but this is only available from Python 3.9 so we
    # upgrade manually.
    local pip_upgrade_output
    if ! pip_upgrade_output="$("$venv_pip" install --upgrade pip setuptools 2>&1)"; then
        echo "$pip_upgrade_output"
        echo
        error_out "Could not upgrade venv Pip at '$venv_pip'."
    fi
    echo "  ✅ upgraded Pip inside venv"

    local complimentary_packages=(wheel)
    echo "➖ Installing complimentary Python packages (${complimentary_packages[*]})" \
        "inside venv..."
    local complimentary_packages_output
    if ! complimentary_packages_output="$( \
            "$venv_pip" install "${complimentary_packages[@]}" 2>&1)"; then
        echo "$complimentary_packages_output"
        echo
        error_out "Could not install all complimentary packages inside" \
            "venv using venv Pip '$venv_pip'."
    fi
    echo "  ✅ installed complimentary packages inside venv"
}

function print_install_success() {
    local standalone_dirname="$1"
    local interpreter_rel_dir="$2"
    local venv_rel_dir="$3"

    local standalone_dir_size
    if ! standalone_dir_size="$(du -sh "$standalone_dirname" | cut -f1)"; then
        error_out "Could not extract size of standalone directory '$standalone_dirname'."
    fi
    echo "✅🐍 The Python standalone environment has been installed successfully in"
    echo "'$standalone_dirname'! (💽 $standalone_dir_size)"
    echo "You can find the interpreter in '$interpreter_rel_dir'"
    echo "and the venv in '$venv_rel_dir'."
    echo

    if [[ -d "./.git" ]]; then
        if ! grep "/${STANDALONE_DIRNAME}/" < ".gitignore" &> /dev/null; then
            echo -e "⚠️  Don't forget to add a line for it in your" \
                "${CLR_BOLD}.gitignore${CLR_END}:"
            echo -e "  ${CLR_BGR}/${STANDALONE_DIRNAME}/${CLR_END}"
            echo
        fi
    fi
}

function print_activation_instructions() {
    local venv_rel_dir="$1"

    echo -e "${CLR_BOLD}ACTIVATION INSTRUCTIONS${CLR_END}"
    echo "You can activate your environment manually for the current shell"
    echo "with the following command:"
    echo -e "  ${CLR_BGR}source ${venv_rel_dir}/bin/activate${CLR_END}"
    echo
    echo -e "ℹ️  Note that manual activations ${CLR_ITL}do not${CLR_END} persist when" \
        "opening a new shell."
    echo
    echo -e "💡 To activate the environment ${CLR_ITL}automatically${CLR_END}," \
        "follow these"
    echo "   instructions:"
    echo "      https://github.com/pwalch/lonesnake#automated-activation"
    echo
}

arg_standalone_version="$DEFAULT_CP_VERSION"
force_removal=0
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --py)
            if [ -z "${2+x}" ]; then
                error_out "Please pass a version number, such as" \
                    "'$DEFAULT_CP_VERSION'. Run '$PROG_NAME --help' for more" \
                    "details."
            fi
            arg_standalone_version="$2"
            shift
        ;;

        --force)
            force_removal=1
        ;;

        --help|-h)
            usage
            exit 1
        ;;

        --version|-v)
            echo "${PROG_NAME} ${PROG_VERSION}"
            exit 1
        ;;

        *)
            error_out "Could not recognize option '$1'."
        ;;
    esac
    shift
done

main "$arg_standalone_version" "$force_removal"
